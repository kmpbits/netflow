package com.kmpbits.netflow_core.builders

import com.kmpbits.netflow_core.alias.Header
import com.kmpbits.netflow_core.alias.Headers
import com.kmpbits.netflow_core.annotations.NetFlowMarker
import com.kmpbits.netflow_core.client.NetFlowClient
import com.kmpbits.netflow_core.client.NetFlowClientImpl
import com.kmpbits.netflow_core.enums.HttpHeader
import com.kmpbits.netflow_core.enums.LogLevel
import com.kmpbits.netflow_core.exceptions.NetFlowException
import com.kmpbits.netflow_core.platform.InternalHttpClient

@NetFlowMarker
class ClientBuilder internal constructor() {
    private val headers: Headers = mutableListOf()
    internal val timeoutBuilder = TimeoutBuilder()

    init {
        val defaultHeaders = listOf(
            Header(HttpHeader.CONTENT_TYPE, "application/x-www-form-urlencoded"),
            Header(HttpHeader.ACCEPT, "application/json")
        )

        defaultHeaders.forEach {
            headers.add(it)
        }
    }

    /**
     * The base url of the request.
     * Should not be empty.
     */
    var baseUrl: String = ""

    var logLevel: LogLevel = LogLevel.None

    /**
     * Authorization header to to send in the http request for all calls.
     *
     * @param token The token generated by the api server.
     * @param prefix That is used to the header. Default is 'Bearer'.
     */
    fun authorization(token: String?, prefix: String = "Bearer") {
        if (hasHeader(HttpHeader.AUTHORIZATION).not()) {
            val header = Header(HttpHeader.AUTHORIZATION, "$prefix $token")
            headers.add(header)
        }
    }

    /**
     * The language that will be used in the server to get the response for all calls.
     *
     * @param languageCode Should have 2 characters only.
     * If you already sent the language, this will be ignored.
     */
    fun language(languageCode: String) {
        if (languageCode.length != 2)
            throw NetFlowException("Language code must contains only 2 characters")

        if (hasHeader(HttpHeader.ACCEPT_LANGUAGE).not()) {
            val header = Header(HttpHeader.ACCEPT_LANGUAGE, languageCode)
            headers.add(header)
        }
    }

    /**
     * The [Header] object to send in the http request for all calls.
     *
     * @param header The header to send.
     */
    fun header(header: Header) {
        headers.add(header)
    }

    /**
     * Call this function to have access to the [TimeoutBuilder] and handle timeout times.
     *
     */
    fun timeout(builder: TimeoutBuilder. () -> Unit) {
        timeoutBuilder.also(builder)
    }

    internal fun build(): NetFlowClient {
        val client = createClient()
        return NetFlowClientImpl(client, baseUrl, logLevel)
    }

    private fun hasHeader(key: HttpHeader) = headers.find { it.first == key } != null
}

internal expect fun ClientBuilder.createClient(): InternalHttpClient